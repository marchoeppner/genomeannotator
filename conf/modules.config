/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Config file for defining DSL2 per module options and publishing paths
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Available keys to override module options:
        ext.args   = Additional arguments appended to command in module.
        ext.args2  = Second set of arguments appended to command in module (multi-tool modules).
        ext.args3  = Third set of arguments appended to command in module (multi-tool modules).
        ext.prefix = File name prefix for output files.
----------------------------------------------------------------------------------------
*/

process {

    publishDir = [
        path: { "${params.outdir}/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
        mode: params.publish_dir_mode,
        saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
    ]
    withName: MULTIQC {
       publishDir = [
            path: { "${params.outdir}/MultiQC" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    withName: EGGNOGMAPPER_EMAPPER {
       publishDir = [
            path: { "${params.outdir}/annotations/FunctionalAnnotation" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    withName: AGAT_CONVERT_SP_GXF2GXF {
       publishDir = [
           path: { "${params.outdir}/annotations/miniprot" },
           mode: params.publish_dir_mode,
           saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
       ]
    }
    withName: 'AUGUSTUS_CREATEGFFIDS|AUGUSTUS_GFF2PROTEINS' {
        publishDir = [
            path: { "${params.outdir}/annotations/augustus" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    withName: 'HELPER_EVM2GFF|EVIDENCEMODELER_GFF2PROTEINS' {
       publishDir = [
            path: { "${params.outdir}/annotations/evm" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    withName: BUSCO {
       publishDir = [
            path: { "${params.outdir}/busco" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    withName: MINIMAP_BAMTOGFF {
       publishDir = [
            path: { "${params.outdir}/transcripts" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    withName: REPEATMODELER {
        publishDir = [
            path: { "${params.outdir}/repeatmodeler" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    withName: REPEATMASKER_CAT_FASTA {
       publishDir = [
            path: { "${params.outdir}/repeatmasker" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    withName: 'HELPER_SPALNTOGMOD|HELPER_MATCH2GMOD' {
        publishDir = [
            path: { "${params.outdir}/gmod" },
            mode: 'copy',
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    withName: 'PASA_ASMBLSTOTRAINING|PASA_GFF2PROTEINS' {
        publishDir = [
            path: { "${params.outdir}/annotations/pasa" },
            mode: 'copy',
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    withName: 'SATSUMA2_SATSUMASYNTENY2|SATSUMA_KRAKEN2GFF' {
        publishDir = [
            path: { "${params.outdir}/synteny" },
            mode: 'copy',
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    withName: REPEATMASKER_REPEATMASK {
        publishDir = [
           [
               path: { "${params.outdir}/repeatmasker/" },
               mode: 'copy',
               saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
               pattern: '*.gff'
           ],
           [
               path: { "${params.outdir}/repeatmasker/" },
               mode: 'copy',
               saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
               pattern: '*.tbl'
           ],
           [
               path: { "${params.outdir}/repeatmasker/" },
               mode: 'copy',
               saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
               pattern: '*.out'
           ],
        ]
    }
    withName: STAR_ALIGN_PASS_TWO {
	    ext.args = "--limitSjdbInsertNsj 3000000"
        publishDir = [
           [
               path: { "${params.outdir}/rnaseq/bam" },
               mode: 'copy',
               saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
               pattern: '*.bam'
           ],
           [
               path: { "${params.outdir}/rnaseq/wiggle" },
               mode: 'copy',
               saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
               pattern: '*.wig'
           ],
           [
               path: { "${params.outdir}/rnaseq/junctions" },
               mode: 'copy',
               saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
               pattern: '*.tab'
           ]
        ]
    }
    withName: 'GAAS_ASSEMBLYFILTERBYSIZE|GAAS_FASTASTATISTICS' {
        publishDir = [
            path: { "${params.outdir}/assembly" },
            mode: 'copy',
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    withName: AUGUSTUS_ALIGNTOHINTS {
        publishDir = [
            path: { "${params.outdir}/processing/hints/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
            mode: 'copy',
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    withName: AUGUSTUS_AUGUSTUSBATCH {
       ext.args   = params.aug_options
    }
    withName: REPEATMASKER_CAT_FASTA {
       ext.prefix = "rm"
    }
    withName: CUSTOM_DUMPSOFTWAREVERSIONS {
        publishDir = [
            path: { "${params.outdir}/pipeline_info" },
            mode: params.publish_dir_mode,
            pattern: '*_versions.yml'
        ]
    }

}
